# Define the name of the GitHub Action workflow
name: ECS Cluster Deploy Drupal

# This workflow is manually triggered using the GitHub Actions UI
on:
  workflow_dispatch:
    inputs:
      Cluster_Name:
        description: 'Name of the ECS Cluster'  
        required: true 
      Region:
        description: 'AWS Region for the instance' 
        required: true  
      action:
        description: 'Action to perform (apply/destroy)'  # Action to be performed (create or delete the instance)
        required: true 
      port_context:
        description: "port_context"
        required: true
###########################################
## Jobs 
###########################################

# Jobs to be executed in this workflow
jobs:
  # Job for applying the EC2 instance
  setup:
    runs-on: ubuntu-latest
    steps:
  # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

  apply-ecs-cluster:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    needs: setup
    # Execute this job only if the action input is "apply"
    if: ${{ github.event.inputs.action == 'apply' }}

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create a log message (apply)
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: "Initiating creation of ECS cluster: ${{ github.event.inputs.Cluster_Name }}."

            # Configure AWS credentials. Please store the value of these keys in GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: .  # Assuming your Terraform files are in the root directory

      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: .

      # Validate the Terraform code
      - name: Terraform Validate
        run: terraform validate
        working-directory: .

      #################################################
      - name: Run Terraform Plan
        run: |
          terraform plan -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -out=tfplan
          terraform show -json tfplan > tfplan.json


      - name: Extract Resource Information
        id: extract
        run: |
          # Use jq to extract relevant information from the JSON plan
          resource_info=$(jq -r '.resource_changes[] | select(.change.actions[] == "create") | .address' tfplan.json)

          # Check if the variable is empty and handle accordingly
          if [ -z "$resource_info" ]; then
            echo "RESOURCE_INFO=none" >> $GITHUB_ENV
          else
            # Replace newlines with commas for a better environment variable format
            resource_info=$(echo "$resource_info" | tr '\n' ',')
            # Remove trailing comma
            resource_info=${resource_info%,}
            echo "RESOURCE_INFO=${resource_info}" >> $GITHUB_ENV
          fi

      - name: Inform Port about the status of the ECS cluster creation
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: "SUCCESS"
          runId:  ${{ fromJson(inputs.port_context).runId }}
          logMessage: |
            ECS cluster creation has been completed.
            Cluster Name: ${{ github.event.inputs.Cluster_Name }}
            Created resources: ${{ env.RESOURCE_INFO }}
      ###################################################

      - name: Terraform Apply
        run: terraform apply -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -auto-approve
        working-directory: .

###########################################
## Deploy Druapal on ECS
###########################################

  deploy-app:
    runs-on: ubuntu-latest
    needs: setup
    needs: apply-ecs-cluster

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./deploy_app

      - name: Terraform Plan
        run: terraform plan -var="Region=${{ github.event.inputs.Region }}" -var="cluster_name=${{ github.event.inputs.Cluster_Name }}"
        working-directory: ./deploy_app

      - name: Terraform Apply
        run: terraform apply -var="Region=${{ github.event.inputs.Region }}" -var="cluster_name=${{ github.event.inputs.Cluster_Name }}" --auto-approve
        working-directory: ./deploy_app


###########################################
## Destroy Drupal App
###########################################

  destroy-app:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./deploy_app

      - name: Terraform Destory
        run: terraform destroy -var="Region=${{ github.event.inputs.Region }}" -var="cluster_name=${{ github.event.inputs.Cluster_Name }}" --auto-approve
        working-directory: ./deploy_app

##############################
## Destroy ECS Cluster
##############################
  destroy-ecs-cluster:
    runs-on: ubuntu-latest
    needs: destroy-app
    # Execute this job only if the action input is "destroy"
    if: ${{ github.event.inputs.action == 'destroy' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Configure AWS credentials. Please store the value of these keys in GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}
        
      # Initialize Terraform
      - name: Terraform Init
        run: terraform init
        working-directory: .
      
      # Format Terraform code
      - name: Terraform Format
        run: terraform fmt
        working-directory: .
      - name: Run Terraform Plan
        run: |
          terraform init
          terraform plan -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -out=tfplan
          terraform show -json tfplan > tfplan.json

      - name: Extract Resource Information
        id: extract
        run: |
          created_resources=$(jq -r '.resource_changes[] | select(.change.actions[] == "create") | .address' tfplan.json)
          destroyed_resources=$(jq -r '.resource_changes[] | select(.change.actions[] == "destroy") | .address' tfplan.json)

          # Check if the variables are empty and handle accordingly
          if [ -z "$destroyed_resources" ]; then
            echo "DESTROYED_RESOURCES=none" >> $GITHUB_ENV
          else
            # Replace newlines with commas for a better environment variable format
            destroyed_resources=$(echo "$destroyed_resources" | tr '\n' ',')
            # Remove trailing comma
            destroyed_resources=${destroyed_resources%,}
            echo "DESTROYED_RESOURCES=${destroyed_resources}" >> $GITHUB_ENV
          fi

      # Destroy the resources managed by Terraform
      - name: Terraform Destroy
        run: terraform destroy -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -auto-approve
        working-directory: .

      # - name: Inform Port about the status of the ECS cluster destruction
      #   if: ${{ github.event.inputs.action == 'destroy' }}
      #   uses: port-labs/port-github-action@v1
      #   with:
      #     clientId: ${{ secrets.PORT_CLIENT_ID }}
      #     clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
      #     baseUrl: https://api.getport.io
      #     operation: PATCH_RUN
      #     status: "SUCCESS"
      #     runId: ${{ fromJson(inputs.port_context).runId }}
      #     logMessage: "ECS cluster destruction has been completed: ${{ github.event.inputs.Cluster_Name }}"

      - name: Inform Port about the status of the ECS cluster destruction
        if: ${{ github.event.inputs.action == 'destroy' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: "SUCCESS"
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: |
            ECS cluster destruction has been completed.
            Destroyed resources: ${{ env.DESTROYED_RESOURCES }}
            Cluster Name: ${{ github.event.inputs.Cluster_Name }}
