name: ECS Cluster Deploy Drupal

on:
  workflow_dispatch:
    inputs:
      Cluster_Name:
        type: string
        description: 'Name of the ECS Cluster'
        required: true
      Region:
        type: string
        description: 'AWS Region for the instance'
        required: true
      action:
        type: string
        description: 'Action to perform (apply/destroy)'
        required: true
      port_context:
        type: string
        description: "Port context, includes blueprint, run ID, and entity identifier from Port."
        required: true

jobs:
  apply-ecs-cluster:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Inform starting ECS cluster creation
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
              Creating ECS cluster... ðŸš¨

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      - name: Terraform Init
        run: terraform init
        working-directory: .

      - name: Terraform Format
        run: terraform fmt
        working-directory: .

      - name: Terraform Validate
        run: terraform validate
        working-directory: .

      - name: Terraform Apply
        run: terraform apply -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -auto-approve
        working-directory: .

      - name: Inform completion of ECS cluster creation
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
              ECS cluster created successfully! âœ…

  destroy-ecs-cluster:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
      - name: Inform starting ECS cluster destruction
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
              Destroying ECS cluster... ðŸš¨

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.Region }}

      - name: Terraform Init
        run: terraform init
        working-directory: .

      - name: Terraform Format
        run: terraform fmt
        working-directory: .

      - name: Terraform Destroy
        run: terraform destroy -var cluster_name=${{ github.event.inputs.Cluster_Name }} -var Region=${{ github.event.inputs.Region }} -auto-approve
        working-directory: .

      - name: Inform completion of ECS cluster destruction
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: |
              ECS cluster destroyed successfully! âœ…
